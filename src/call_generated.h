// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CALL_TEST_H_
#define FLATBUFFERS_GENERATED_CALL_TEST_H_

#include "flatbuffers/flatbuffers.h"

namespace test {

struct data_t;

struct _3d;

struct msg_t;

enum type_t {
  type_t_a = 0,
  type_t_b = 1,
  type_t_MIN = type_t_a,
  type_t_MAX = type_t_b
};

inline const type_t (&EnumValuestype_t())[2] {
  static const type_t values[] = {
    type_t_a,
    type_t_b
  };
  return values;
}

inline const char * const *EnumNamestype_t() {
  static const char * const names[3] = {
    "a",
    "b",
    nullptr
  };
  return names;
}

inline const char *EnumNametype_t(type_t e) {
  if (e < type_t_a || e > type_t_b) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamestype_t()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) data_t FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  data_t() {
    memset(static_cast<void *>(this), 0, sizeof(data_t));
  }
  data_t(float _x, float _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(data_t, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) _3d FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  _3d() {
    memset(static_cast<void *>(this), 0, sizeof(_3d));
  }
  _3d(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(_3d, 12);

struct msg_t FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_DATA = 6,
    VT_COORDINATES = 8
  };
  test::type_t type() const {
    return static_cast<test::type_t>(GetField<uint32_t>(VT_TYPE, 0));
  }
  const test::data_t *data() const {
    return GetStruct<const test::data_t *>(VT_DATA);
  }
  const test::_3d *coordinates() const {
    return GetStruct<const test::_3d *>(VT_COORDINATES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_TYPE) &&
           VerifyField<test::data_t>(verifier, VT_DATA) &&
           VerifyField<test::_3d>(verifier, VT_COORDINATES) &&
           verifier.EndTable();
  }
};

struct msg_tBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(test::type_t type) {
    fbb_.AddElement<uint32_t>(msg_t::VT_TYPE, static_cast<uint32_t>(type), 0);
  }
  void add_data(const test::data_t *data) {
    fbb_.AddStruct(msg_t::VT_DATA, data);
  }
  void add_coordinates(const test::_3d *coordinates) {
    fbb_.AddStruct(msg_t::VT_COORDINATES, coordinates);
  }
  explicit msg_tBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  msg_tBuilder &operator=(const msg_tBuilder &);
  flatbuffers::Offset<msg_t> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<msg_t>(end);
    return o;
  }
};

inline flatbuffers::Offset<msg_t> Createmsg_t(
    flatbuffers::FlatBufferBuilder &_fbb,
    test::type_t type = test::type_t_a,
    const test::data_t *data = 0,
    const test::_3d *coordinates = 0) {
  msg_tBuilder builder_(_fbb);
  builder_.add_coordinates(coordinates);
  builder_.add_data(data);
  builder_.add_type(type);
  return builder_.Finish();
}

inline const test::msg_t *Getmsg_t(const void *buf) {
  return flatbuffers::GetRoot<test::msg_t>(buf);
}

inline const test::msg_t *GetSizePrefixedmsg_t(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<test::msg_t>(buf);
}

inline bool Verifymsg_tBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<test::msg_t>(nullptr);
}

inline bool VerifySizePrefixedmsg_tBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<test::msg_t>(nullptr);
}

inline void Finishmsg_tBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<test::msg_t> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedmsg_tBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<test::msg_t> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace test

#endif  // FLATBUFFERS_GENERATED_CALL_TEST_H_
